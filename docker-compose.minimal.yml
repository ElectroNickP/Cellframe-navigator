version: "3.9"

# Minimal configuration - only Telegram bot without blockchain watchers
# Usage: docker-compose -f docker-compose.minimal.yml up

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: cellframe_db_minimal
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: cellframe
      POSTGRES_INITDB_ARGS: "-E UTF8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cellframe_network

  # Redis Cache and Queue
  redis:
    image: redis:7-alpine
    container_name: cellframe_redis_minimal
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - cellframe_network

  # Database Migration Service
  migration:
    build: .
    container_name: cellframe_migration_minimal
    command: python -m alembic upgrade head
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./:/app
    networks:
      - cellframe_network
    restart: "no"

  # Telegram Bot Service (only this is required!)
  bot:
    build: .
    container_name: cellframe_bot_minimal
    command: python -m bot.main
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
    volumes:
      - ./:/app
    restart: unless-stopped
    networks:
      - cellframe_network

networks:
  cellframe_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:

